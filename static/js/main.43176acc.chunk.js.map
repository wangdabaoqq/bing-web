{"version":3,"sources":["views/Index/index.js","App.js","serviceWorker.js","views/Detail/index.js","index.js"],"names":["withRouter","props","useState","data","setData","time","setTime","datas","setDatas","ddd","createRef","page","pageSize","query","setCount","loadImage","el","setTimeout","img","Image","onload","classList","remove","add","src","this","getAttribute","isview","box","getBoundingClientRect","top","height","parentNode","bottom","document","body","documentElement","clientHeight","render","i","length","elem","contains","splice","listen","clearTimeout","dom","querySelectorAll","Array","from","addEventListener","window","attachEvent","useEffect","a","axios","get","params","result","console","log","fetchData","ele","map","span","key","hsh","to","className","ref","data-progressive","url","alt","style","copyright","enddate","onChange","val","current","showSizeChanger","total","App","Boolean","location","hostname","match","Detail","imgUrl","setImg","id","onClick","history","goBack","position","left","backgroundImage","ReactDOM","path","exact","component","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.43176acc.chunk.js","sourcesContent":["import React, { useEffect, useState, createRef } from 'react';\nimport { Link } from 'react-router-dom'\nimport { Row, Col, Pagination } from 'antd';\nimport axios from 'axios'\nimport { withRouter } from  'react-router-dom'\n// import LazyLoad from 'react-lazy-load';\n\nimport './index.css'\nfunction Index(props) {\n  // console.log(props)\n  // let datas = [1, 2, 3]\n  const [data, setData] = useState({ data: []});\n  // const [flur, setFlur] = useState(false)\n  // const [name, setName] = useState('aaa');\n  const [time, setTime] = useState(null)\n  const [datas, setDatas] = useState({ data: [] })\n  // const liRef = useRef();\n  // const liRefList = useRef([])\n  // const inputEl = useRef();\n  const ddd = createRef();\n  const [query, setCount] = useState(() => {\n    return {\n      page: 1,\n      pageSize: 12\n    }\n  })\n  const loadImage = (el) => {\n    // console.log(el)\n    setTimeout(function () {\n      var img = new Image()\n\n      img.onload = function () {\n        // console.log(el.classList)\n        el.classList.remove('progressive--not-loaded')\n        el.classList.add('progressive--is-loaded')\n        el.src = this.src\n        // console.log(this.src)\n        // console.log(onLoad)\n        // onLoad(el)\n      }\n      // console.log(el.getAttribute('data-progressive'))\n      img.src = el.getAttribute('data-progressive')\n    }, 0)\n  };\n  const isview = (el) => {\n    // let el = ddd.current\n    // console.log(el.getBoundingClientRect(), el)\n    let box = el.getBoundingClientRect()\n    let top = box.top\n    let height = box.height\n\n    el = el.parentNode\n    // console.log(box, el)\n    do {\n      box = el.getBoundingClientRect()\n      // console.log(box, el)\n        // console.log(el, box, top)\n      // eslint-disable-next-line no-mixed-operators\n      if (top <= box.bottom === false) {\n        return false\n      }\n      // console.log(top + height, box.top, el)\n      if ((top + height) <= box.top) {\n        return false\n      }\n\n      el = el.parentNode\n      // console.log(el, document.documentElement.clientHeight, top)\n    } while (el !== document.body)\n    // console.log(el, document.documentElement.clientHeight, top)\n    // console.log(box, top, document.documentElement.clientHeight, el)\n    return top <= document.documentElement.clientHeight\n  }\n  const render = () => {\n    for (var i = datas.length - 1; i >= 0; --i) {\n      let elem = datas[i]\n      // console.log(elem)\n      // console.log(elem.getBoundingClientRect())\n      // console.log(elem)\n      // console.log(isview(elem))\n      if (isview(elem) && elem.classList.contains('progressive--not-loaded')) {\n        loadImage(elem)\n        datas.splice(i, 1)\n      }\n    }\n  }\n  const listen = () => {\n    if (time) {\n      return\n    }\n    clearTimeout(setTime)\n    setTime(setTimeout(function () {\n      // check()\n      render()\n      // setTime = null\n    }, 200))\n  }\n  const getEle = () => {\n    setTimeout(() => {\n      let dom = document.querySelectorAll('.progressive__img')\n      // console.log(dom)\n      setDatas(Array.from(dom))\n      render()\n      if (document.addEventListener) {\n        window.addEventListener('scroll', listen, false)\n        window.addEventListener('load', listen, false)\n      } else {\n        window.attachEvent('onscroll', listen)\n        window.attachEvent('onload', listen)\n      }\n      // console.log(Array.from(dom), dom)\n      // let data = Array.from(dom)\n      // for (let index = 0; index <data.length; index++) {\n      //   const element = data[index]\n      //   console.log(element.getBoundingClientRect(), element)\n      // }\n    }, 100)\n  }\n  getEle()\n  useEffect(() => {\n    // console.log(inputEl)\n    // const [ listQuery ] = useState(() => 1)\n    const fetchData = async () => {\n      let result = await axios.get('http://bing.pearadmin.com:3212/api', {params: query})\n      console.log(result)\n      setData(result.data)\n      // setLoading(false)\n    }\n    fetchData()\n    \n  }, [query])\n  const onChange = (val) => {\n    setCount({\n      ...query,\n      page: val\n    })\n  }\n  let ele = data.data.map((ele, i) => {\n    return (\n    <Col span={8} key={ele.hsh}  >\n      <Link to={`/detail/${ele.hsh}`}>\n        <div className=\"content progressive\">\n          <img className=\"progressive__img progressive--not-loaded\" ref={ddd} data-progressive={ele.url}  alt=\"\" style={{'width': '100%', height: '100%'}} \n           src={ele.url}\n           />\n        {/* <Image\n           style={{'width': '100%', height: '100%'}} \n           src={ele.url}\n           placeholder={\n          <Image onLoad={imgLoad}   style={{'width': '100%', height: '100%'}} src={`${ele.url}?imageMogr2/blur/200x50`} alt={ele.copyright} />\n           }\n           /> */}\n          <div className=\"desc\">\n            <h3>{ ele.copyright }</h3>\n            <p>{ele.enddate}</p>\n          </div>\n        </div>\n        </Link>\n    </Col>\n    )\n  })\n  return (\n    <div className=\"Index\">\n      <Row>\n        {\n          ele\n        }\n      </Row>\n    <Pagination\n    className=\"pageStyle\"\n    onChange={onChange} \n    current={query.page}\n    pageSize={query.pageSize}\n    showSizeChanger\n    total={data.total} />\n    </div>\n  );\n}\n\nexport default withRouter(Index);\n","import React from 'react';\nimport Index from './views/Index'\nimport './App.css';\nimport 'antd/dist/antd.css';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Index />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport React, { useEffect, useState } from 'react';\nimport { Button } from 'antd'\nimport './index.css'\nfunction Detail (props) {\n  // console.log(props.match.params.id)\n  const [imgUrl, setImg] = useState('');\n  useEffect(() => {\n    // console.log(props.match.params.id)\n    let url = `http://abc.pearadmin.com/${props.match.params.id}`\n    setImg(url)\n  }, [props, imgUrl])\n  const backTop = () => {\n    // console.log(props)\n    props.history.goBack()\n  }\n    // console.log(props.match.prarms.id)\n  // const [id] = useEffect()\n  // const [ids] = useState()\n  return (\n    <div style={{height: '100vh'}}>\n        <Button onClick={backTop} style={{position: 'absolute', top: '10px', left: '10px'}}>返回</Button>\n        <div className=\"backImgStyle\" style={{backgroundImage: `url(${imgUrl})`}} />\n    </div>\n  )\n}\nexport default Detail;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Detail from './views/Detail'\n// import Index from './views/Index'\n\n// import { Router, Route } from 'react-router';\nimport { Route,  HashRouter, Switch } from 'react-router-dom';\n\nReactDOM.render(\n  <HashRouter>\n  {/* <Router> */}\n  <Switch>\n    <Route path=\"/\" exact component={App}></Route>\n    <Route path=\"/detail/:id\"  component={Detail}></Route>\n  {/* </Router> */}\n  </Switch>\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}